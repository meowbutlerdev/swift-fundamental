/**
 객체 지향 프로그래밍
 - 객체: class의 인스턴스
 - 지향: 어떤 목표로 뜻이 쏠리다
 - 프로그래밍: 개발
 - 즉, 클래스의 인스턴스를 사용하는 개발을 지향하는 프로그래밍 방식
 - 객체 단위로 코드를 구성하고 관리하기 때문에 코드의 재사용성과 유지보수성이 좋아짐
   - 객체란?
     - 클래스를 사용해서 만들어진 인스턴스
     - 상태(프로퍼티)와 행동(메서드)로 이러우짐
     - 서로 메시지를 주고 받으며(메서드 호출) 상호작용함
 - 클래스의 인스턴스는 일급 객체로 간주
   - 변수나 프로퍼티에 할당 가능
   - 함수나 메서드에 파라미터로 전달 가능
   - 함수나 메서드의 반환값으로 사용 가능
   - 런타임에 생성 가능

 객체 지향 프로그래밍의 4가지 특성
 - 추상화
   - 복잡한 시스템을 단순화하여 공통적인 특성이나 기능을 추출하여 파악하는 것
   - 핵심 기능을 노출하고, 불필요한 세부 사항은 숨기는 것
   - 추상화를 통해 복잡성을 줄이고, 중요한 부분에만 집중 가능
   - 장점
     - 복잡성이 낮아짐: 복잡한 세부 내용을 숨겨 서비스를 단순하게 다룸
     - 유지보수가 쉬워짐: 세부 내용이 변경되어도 사용 방법은 바뀌지 않아 유지보수가 쉬움
     - 모듈화: 각 객체가 독립적인 기능을 갖고 동작하기 때문에 서로 독립적으로 수정가능 → 모듈 단위로 분리하여 개발 가능
 - 캡슐화
   - 속성(프로퍼티)와 행동(메서드)를 하나의 단위로 묶어서 관리하는 것
   - 캡슐화의 핵심은 캡슐화와 은닉화로 나뉨
     - 캡슐화: 관련된 프로퍼티와 메서드를 묶어 놓음
     - 은닉화: 객체 내부의 데이터를 외부에서 접근하지 못하도록 감추거나 허용범위를 설정함
   - 장점
     - 데이터의 무결성 보장: 외부에서 직접 변경하지 못하게 하고, 객체 내부에서만 변경하게 만들면 데이터의 무결성이 보장됨
     - 데이터를 보호하고 보안성을 높임: 외부에서 직접 접근하지 못하게 하면 데이터가 손상되거나 예상치 못하게 변경되는 것을 막을 수 있음
 - 상속
   - 하위클래스가 상위클래스의 프로퍼티와 메서드를 물려받아 사용하는 것
   - 하위클래스에서는 상위클래스에서 제공하는 연산 프로퍼티와 메서드를 재정의(override)하여 사용할 수 있음
   - 상속받는 방법은 class를 선언할 때 이름 뒤에 :를 붙인 뒤 상속받을 class 이름을 작성하면 됨
   - class만 상속 가능
     - struct, enum은 상속 불가능
     - protocol 채택은 class, enum, struct 모두 가능
     - 상속은 한 개의 클래스에서만 받을 수 있음 (다중 상속을 지원하지 않음)
   - super 키워드를 사용하여 상위클래스의 메서드나 프로퍼티에 접근 가능
   - 하위클래스와 상위클래스는 부르는 이름이 다양함
     - 하위클래스 / 상위클래스
     - 자식클래스 / 부모클래스
     - 서브클래스 / 슈퍼클래스
   - 장점
     - 코드의 재사용성이 높아짐
     - 기존 기능을 확장하거나 새로운 기능 추가 가능
   - 단점
     - 상속 계층이 깊어지면 클래스간의 의존성과 복잡성이 증가함
     - 상위클래스에 변화가 생기면 하위클래스에도 영향을 미쳐 유지보수가 어려워질 수 있음
 - 다형성
   - 같은 이름의 메서드가 다양한 방식으로 동작할 수 있는 특성
   - 메서드 오버로딩(overloading)과 오버라이딩(overriding)을 통하여 다형성을 구현할 수 있음
   - 오버로딩
     - 같은 이름의 메서드를 파라미터의 타입이나 개수가 다르면 다른 메서드로 취급하는 방법
   - 오버라이딩
     - 상속받은 부모클래스의 메서드를 자식클래스에서 재정의 하는 것
     - func 키워드 앞에 override 키워드를 사용하여 재정의할 수 있음
     - super 키워드를 사용하여 부모클래스의 메서드를 호출할 수 있음
 */
