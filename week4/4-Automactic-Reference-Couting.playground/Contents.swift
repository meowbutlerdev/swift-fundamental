/**
 ARC
 - Reference Type의 인스턴스 메모리 관리를 자동으로 해주는 기능
   - Value Type의 인스턴스는 ARC가 관리하지 않음
 - 메모리 관리를 직접 하지 않아도 ARC가 자동으로 메모리 관리를 처리함
   - 인스턴스가 더 이상 필요하지 않을 때 메모리에서 자동으로 해제됨
 - Reference Type의 인스턴스를 참조할 때, 참조카운트가 증가하며, 이를 Strong 참조(default)라고 함
 - 참조 카운트의 증가를 원하지 않는 경우 weak 또는 unowned 참조를 사용

 ARC 동작 방식
 1. 인스턴스 생성과 메모리 할당
   - class의 새로운 인스턴스를 생성할 때 마다 ARC는 해당 인스턴스에 대한 정보를 저장할 메모리 공간을 할당함
   - 이 공간에는 인스턴스의 타입 정보와 프로퍼티의 값이 저장됨
 2. 참조 카운트 관리
   - ARC는 사용중인 인스턴스가 메모리에서 해제되지 않도록, 몇 개의 프로퍼티, 상수, 변수가 인스턴스를 참조하고 있는지 추적
   - 참조 시작 시: 카운트 + 1
   - 참조 종료 시: 카운트 - 1
   - 최종적으로 참조카운트 0이 되면 인스턴스는 메모리에서 해제됨
 3. 메모리 해제
   - 참조 카운트가 0이 된 인스턴스는 더 이상 필요하지 않기 때문에, ARC가 해당 인스턴스가 사용했던 메모리를 해제함
   - 만약 참조 카운터가 0이 되기 전에 인스턴스가 해제되면, 이후 그 인스턴스에 접근할 경우 크래시 발생

 ARC 동작 시기
 - ARC는 컴파일타임에 인스턴스의 참조 카운트를 증가 또는 감소시키는 코드를 자동으로 삽입함

 Memory Leak
 - 메모리 누수
 - 사용이 끝난 인스턴스가 메모리에서 해제되지 않고 남아있는 현상
 - 이렇게 메모리 공간이 불필요하게 사용되면 성능 저하가 발생할 수 있음

 강한 순환 참조(Strong Reference Cycle)
 - iOS에서 자주 발생하는 Memory Leak의 원인 중 하나

 강한 순환 참조 해결 방법
 - 참조 카운트를 올리지 않으면 강한 순환 참조를 방지할 수 있음
 - 참조 카운트를 올리지 않기 위해서는 strong이 아닌 weak 또는 unowned를 사용

 객체를 참조하는 방법 세 가지
 - strong
   - 강한 참조
   - Default
   - 객체를 참조 시작하면 참조 카운트가 1 올라감
   - 객체 참조가 종료되면 참조 카운트가 1 내려감
 - weak
   - 약한 참조
   - 객체를 참조해도 참조카운트가 변하지 않음
   - 객체 참조가 종료되도 참조카운트가 변하지 않음
   - nil을 허용
 - unowned
   - 미소유 참조
   - 객체를 참조해도 참조카운트가 변하지 않음
   - 객체 참조가 종료되도 참조카운트가 변하지 않음
   - nil이면 크래시 발생
 */
