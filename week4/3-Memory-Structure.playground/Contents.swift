/**
 프로세스
 - 실행중인 프로그램의 인스턴스를 의미
 - 즉, 실행되는 앱 = 프로세스
 - 앱이 실행되면, 운영 체제는 앱의 실행을 관리하기 위해 프로세스를 생성함
 - 프로세스는 자신만의 메모리 영역을 할당받고, 앱의 실행상태를 관리

 메모리 구조
 - 앱을 실행하면 운영체제가 메모리에 영역을 설정
 - 메모리 영역에는 크게 4가지 영역(Code, Data, Heap, Stack) 존재

 Code 영역
 - 우리가 작성한 코드는 컴파일되어 기계어로 변환돼 이 영역에 저장
 - CPU는 이 영역에 저장된 코드를 읽고 해당 작업을 처리
 - 프로그램 실행과 동시에 메모리에 할당되며, 프로그램이 종료되면 메모리에서 해제
 - Read-Only로 실행중에는 변경 불가능

 Data 영역
 - 전역변수와 정적(static)변수가 저장되는 메모리 영역
 - 프로그램 실행 시 메모리에 할당되며, 프로그램 종료 시 메모리에서 해제
 - 프로그램 실행 중 변수 값이 변경될 수 있으므로 Read-Write

 Heap 영역
 - class 인스턴스나 클로저같은 참조 타입(Reference type)의 데이터가 할당되는 동적 메모리 영역
 - 이 영역의 메모리 크기는 런타임에 결정되며, 확정되지 않은 크기의 데이터가 저장됨
 - ARC를 통해서 메모리 관리가 자동으로 이루어짐
   - 개발자는 메모리 누수에 주의해야 함
   - 자동으로 관리하지만 관리를 해야함
 - 메모리에 할당되고 해제되는 과정이 상대적으로 느림

 Stack 영역
 - 함수 호출 시 생성되는 지역변수, 매개변수, 리턴값 등이 저장됨
 - 일반적으로 값 타입(Value type)의 데이터가 저장됨
 - 함수가 종료되면 자동으로 메모리에서 해제됨
 - 메모리 할당 및 해제의 속도가 Heap 영역보다 빠름
 - 컴파일 시점에 해당 영역의 메모리 크기가 결정됨
 - 스택 메모리는 크기가 제한되어 있어, 이를 초과하면 스택 오버플로우가 발생하여 프로그램이 종료될 수 있음

 Value Type
 - 데이터를 직접 저장하고 복사하여 전달
 - Value Type의 인스턴스를 다른 변수나 상수에 할당하거나 메소드의 파라미터로 전달할 때, 실제 값의 복사본을 생성하여 전달
 - 데이터가 stack 영역 메모리에 저장되는 경우가 많고 메모리 접근이 빠름
 - 원본 데이터를 전달하는 게 아니기 때문에 전달받은 값을 변경해도 원본값이 바뀌지 않음
 - 원본의 값이 변경되지 않기 때문에 멀티스레드 환경에서 안전하게 사용 가능

 Reference Type
 - 데이터를 직접 저장하지 않고 메모리 주소를 저장하고 전달하여 사용
 - Reference Type의 인스턴스를 다른 변수나 상수에 할당하거나 메소드의 파라미터로 전달할 때, 저장하고 있는 인스턴스의 실제 주소값을 전달
 - 주소값을 전달하기 때문에 전달받은 곳에서 값을 변경하면 원본의 값이 변경됨
 - 실제 데이터가 heap 영역에 저장됨
 - 하나의 인스턴스에 대해 여러 참조자가 있을 수 있으며 하나의 참조자가 값을 변경하면 모든 참조자의 값이 변경됨
 - ARC에 의해 메모리 관리가 자동으로 이루어지며, 참조카운팅을 통해 메모리 해제 시점이 결정됨
 */
