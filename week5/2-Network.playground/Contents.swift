/**
 네트워크
 - URLSession을 사용하여 서버와 네트워크 통신을 처리함
 - 앱과 서버간의 데이터 통신, API 호출 등에 사용

 RESTful API
 - 서버와 클라이언트 간 데이터를 주고 받기 위한 표준화된 방법을 정의한 것
 - 주로 JSON이나 XML을 통해 데이터를 주고 받으며, 의도에 맞는 HTTP 메서드를 사용
 - 주로 사용되는 HTTP 메서드
   - GET
     - 서버에서 데이터를 읽어올 때 사용
     - 쿼리스트링으로 데이터를 전달
       - URL 뒤에 ?를 붙인 후 key=value 형태로 데이터를 전달
       - 여러 개의 데이터를 보낼 때는 &를 사용하여 구분
     - POST
       - 새로운 데이터 생성을 요청
       - Body에 데이터를 담아서 요청
     - PUT
       - 기존 데이터를 수정하거나 업데이트
       - Body에 데이터를 담아서 요청
     - PATCH
       - 기존 데이터의 일부를 수정할 때 요청
       - Body에 데이터를 담아서 요청
     - DELETE
       - 데이터 삭제를 요청

 URLSession
 - 서버와 네트워크 통신을 처리하는 핵심 객체
 - 네트워크 요청을 관리하고, 네트워크 작업을 실행하며 결과를 처리함
 - 비동기적으로 네트워크 요청을 보내고 응답을 받아서 이벤트 처리
 - URLSessionTask
   - URLSession.shared.dataTask(...)의 반환 타입으로 서버에 데이터를 요청하는 비동기 작업 담당
   - dataTask(with:) 메서드는 URL을 통해 데이터를 요청하고, 클로저 내부에서 서버의 응답을 처리함
   - task.resume()은 실제로 네트워크 요청을 시작하는 부분으로 URLSessionTask는 기본적으로 멈춘 상태에서 시작되기 때문에 resume()을 호출해야 작업이 진행됨
 - URLSessionConfiguration
   - 타임아웃, 캐시 정책 등을 설정하고 싶다면 세션을 구성 가능

 Result Type
 - 비동기 작업이나 에러가 발생할 수 있는 작업의 결과를 명확하게 처리하기 위해 사용되는 열거형
 - 작업이 성공했을 때와 실패했을 때의 결과를 한 번에 처리할 수 있도록 설계되어, 코드의 가독성을 높이고 에러 처리를 직관적이게 함
 - success, failure 두 가지로 정의되어 있음
 - Success, Failure는 제네릭으로 되어 있어 동적으로 사용이 가능하며, Failure는 Error 프로토콜을 따르는 타입만 사용 가능

 Codable
 - 서버에서 전송된 문자 형식의 데이터를 Siwft 인스턴스로 변환하거나, Swift 인스턴스를 서버에 전송할 형식(JSON, XML)으로 변환하는 프로토콜
 - Decodable: JSON, XML의 데이터 형식을 Swift 인스턴스로 디코딩
 - Encodable: Swift 인스턴스를 JSON, XML의 데이터 형식으로 인코딩
 */
